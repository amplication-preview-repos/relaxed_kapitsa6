/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RdpDetail } from "./RdpDetail";
import { RdpDetailCountArgs } from "./RdpDetailCountArgs";
import { RdpDetailFindManyArgs } from "./RdpDetailFindManyArgs";
import { RdpDetailFindUniqueArgs } from "./RdpDetailFindUniqueArgs";
import { CreateRdpDetailArgs } from "./CreateRdpDetailArgs";
import { UpdateRdpDetailArgs } from "./UpdateRdpDetailArgs";
import { DeleteRdpDetailArgs } from "./DeleteRdpDetailArgs";
import { Client } from "../../client/base/Client";
import { RdpDetailService } from "../rdpDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RdpDetail)
export class RdpDetailResolverBase {
  constructor(
    protected readonly service: RdpDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "read",
    possession: "any",
  })
  async _rdpDetailsMeta(
    @graphql.Args() args: RdpDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RdpDetail])
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "read",
    possession: "any",
  })
  async rdpDetails(
    @graphql.Args() args: RdpDetailFindManyArgs
  ): Promise<RdpDetail[]> {
    return this.service.rdpDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RdpDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "read",
    possession: "own",
  })
  async rdpDetail(
    @graphql.Args() args: RdpDetailFindUniqueArgs
  ): Promise<RdpDetail | null> {
    const result = await this.service.rdpDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RdpDetail)
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "create",
    possession: "any",
  })
  async createRdpDetail(
    @graphql.Args() args: CreateRdpDetailArgs
  ): Promise<RdpDetail> {
    return await this.service.createRdpDetail({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RdpDetail)
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "update",
    possession: "any",
  })
  async updateRdpDetail(
    @graphql.Args() args: UpdateRdpDetailArgs
  ): Promise<RdpDetail | null> {
    try {
      return await this.service.updateRdpDetail({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RdpDetail)
  @nestAccessControl.UseRoles({
    resource: "RdpDetail",
    action: "delete",
    possession: "any",
  })
  async deleteRdpDetail(
    @graphql.Args() args: DeleteRdpDetailArgs
  ): Promise<RdpDetail | null> {
    try {
      return await this.service.deleteRdpDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: RdpDetail): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
