/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ClientInterface as PrismaClientInterface,
  Client as PrismaClient,
  InterfaceModel as PrismaInterfaceModel,
} from "@prisma/client";

export class ClientInterfaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClientInterfaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clientInterface.count(args);
  }

  async clientInterfaces<T extends Prisma.ClientInterfaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientInterfaceFindManyArgs>
  ): Promise<PrismaClientInterface[]> {
    return this.prisma.clientInterface.findMany<Prisma.ClientInterfaceFindManyArgs>(
      args
    );
  }
  async clientInterface<T extends Prisma.ClientInterfaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientInterfaceFindUniqueArgs>
  ): Promise<PrismaClientInterface | null> {
    return this.prisma.clientInterface.findUnique(args);
  }
  async createClientInterface<T extends Prisma.ClientInterfaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientInterfaceCreateArgs>
  ): Promise<PrismaClientInterface> {
    return this.prisma.clientInterface.create<T>(args);
  }
  async updateClientInterface<T extends Prisma.ClientInterfaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientInterfaceUpdateArgs>
  ): Promise<PrismaClientInterface> {
    return this.prisma.clientInterface.update<T>(args);
  }
  async deleteClientInterface<T extends Prisma.ClientInterfaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientInterfaceDeleteArgs>
  ): Promise<PrismaClientInterface> {
    return this.prisma.clientInterface.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.clientInterface
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getInterfaceField(
    parentId: string
  ): Promise<PrismaInterfaceModel | null> {
    return this.prisma.clientInterface
      .findUnique({
        where: { id: parentId },
      })
      .interfaceField();
  }
}
