/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClientInterface } from "./ClientInterface";
import { ClientInterfaceCountArgs } from "./ClientInterfaceCountArgs";
import { ClientInterfaceFindManyArgs } from "./ClientInterfaceFindManyArgs";
import { ClientInterfaceFindUniqueArgs } from "./ClientInterfaceFindUniqueArgs";
import { CreateClientInterfaceArgs } from "./CreateClientInterfaceArgs";
import { UpdateClientInterfaceArgs } from "./UpdateClientInterfaceArgs";
import { DeleteClientInterfaceArgs } from "./DeleteClientInterfaceArgs";
import { Client } from "../../client/base/Client";
import { InterfaceModel } from "../../interfaceModel/base/InterfaceModel";
import { ClientInterfaceService } from "../clientInterface.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClientInterface)
export class ClientInterfaceResolverBase {
  constructor(
    protected readonly service: ClientInterfaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "read",
    possession: "any",
  })
  async _clientInterfacesMeta(
    @graphql.Args() args: ClientInterfaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClientInterface])
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "read",
    possession: "any",
  })
  async clientInterfaces(
    @graphql.Args() args: ClientInterfaceFindManyArgs
  ): Promise<ClientInterface[]> {
    return this.service.clientInterfaces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClientInterface, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "read",
    possession: "own",
  })
  async clientInterface(
    @graphql.Args() args: ClientInterfaceFindUniqueArgs
  ): Promise<ClientInterface | null> {
    const result = await this.service.clientInterface(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientInterface)
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "create",
    possession: "any",
  })
  async createClientInterface(
    @graphql.Args() args: CreateClientInterfaceArgs
  ): Promise<ClientInterface> {
    return await this.service.createClientInterface({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        interfaceField: args.data.interfaceField
          ? {
              connect: args.data.interfaceField,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientInterface)
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "update",
    possession: "any",
  })
  async updateClientInterface(
    @graphql.Args() args: UpdateClientInterfaceArgs
  ): Promise<ClientInterface | null> {
    try {
      return await this.service.updateClientInterface({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          interfaceField: args.data.interfaceField
            ? {
                connect: args.data.interfaceField,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientInterface)
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "delete",
    possession: "any",
  })
  async deleteClientInterface(
    @graphql.Args() args: DeleteClientInterfaceArgs
  ): Promise<ClientInterface | null> {
    try {
      return await this.service.deleteClientInterface(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(
    @graphql.Parent() parent: ClientInterface
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InterfaceModel, {
    nullable: true,
    name: "interfaceField",
  })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "any",
  })
  async getInterfaceField(
    @graphql.Parent() parent: ClientInterface
  ): Promise<InterfaceModel | null> {
    const result = await this.service.getInterfaceField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
