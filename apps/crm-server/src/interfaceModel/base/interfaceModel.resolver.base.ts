/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InterfaceModel } from "./InterfaceModel";
import { InterfaceModelCountArgs } from "./InterfaceModelCountArgs";
import { InterfaceModelFindManyArgs } from "./InterfaceModelFindManyArgs";
import { InterfaceModelFindUniqueArgs } from "./InterfaceModelFindUniqueArgs";
import { CreateInterfaceModelArgs } from "./CreateInterfaceModelArgs";
import { UpdateInterfaceModelArgs } from "./UpdateInterfaceModelArgs";
import { DeleteInterfaceModelArgs } from "./DeleteInterfaceModelArgs";
import { ClientInterfaceFindManyArgs } from "../../clientInterface/base/ClientInterfaceFindManyArgs";
import { ClientInterface } from "../../clientInterface/base/ClientInterface";
import { InterfaceModelService } from "../interfaceModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InterfaceModel)
export class InterfaceModelResolverBase {
  constructor(
    protected readonly service: InterfaceModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "any",
  })
  async _interfaceModelsMeta(
    @graphql.Args() args: InterfaceModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InterfaceModel])
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "any",
  })
  async interfaceModels(
    @graphql.Args() args: InterfaceModelFindManyArgs
  ): Promise<InterfaceModel[]> {
    return this.service.interfaceModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InterfaceModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "own",
  })
  async interfaceModel(
    @graphql.Args() args: InterfaceModelFindUniqueArgs
  ): Promise<InterfaceModel | null> {
    const result = await this.service.interfaceModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InterfaceModel)
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "create",
    possession: "any",
  })
  async createInterfaceModel(
    @graphql.Args() args: CreateInterfaceModelArgs
  ): Promise<InterfaceModel> {
    return await this.service.createInterfaceModel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InterfaceModel)
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "update",
    possession: "any",
  })
  async updateInterfaceModel(
    @graphql.Args() args: UpdateInterfaceModelArgs
  ): Promise<InterfaceModel | null> {
    try {
      return await this.service.updateInterfaceModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InterfaceModel)
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "delete",
    possession: "any",
  })
  async deleteInterfaceModel(
    @graphql.Args() args: DeleteInterfaceModelArgs
  ): Promise<InterfaceModel | null> {
    try {
      return await this.service.deleteInterfaceModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClientInterface], { name: "clientInterfaces" })
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "read",
    possession: "any",
  })
  async findClientInterfaces(
    @graphql.Parent() parent: InterfaceModel,
    @graphql.Args() args: ClientInterfaceFindManyArgs
  ): Promise<ClientInterface[]> {
    const results = await this.service.findClientInterfaces(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
