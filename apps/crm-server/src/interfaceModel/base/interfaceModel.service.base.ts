/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InterfaceModel as PrismaInterfaceModel,
  ClientInterface as PrismaClientInterface,
} from "@prisma/client";

export class InterfaceModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InterfaceModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.interfaceModel.count(args);
  }

  async interfaceModels<T extends Prisma.InterfaceModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterfaceModelFindManyArgs>
  ): Promise<PrismaInterfaceModel[]> {
    return this.prisma.interfaceModel.findMany<Prisma.InterfaceModelFindManyArgs>(
      args
    );
  }
  async interfaceModel<T extends Prisma.InterfaceModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterfaceModelFindUniqueArgs>
  ): Promise<PrismaInterfaceModel | null> {
    return this.prisma.interfaceModel.findUnique(args);
  }
  async createInterfaceModel<T extends Prisma.InterfaceModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterfaceModelCreateArgs>
  ): Promise<PrismaInterfaceModel> {
    return this.prisma.interfaceModel.create<T>(args);
  }
  async updateInterfaceModel<T extends Prisma.InterfaceModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterfaceModelUpdateArgs>
  ): Promise<PrismaInterfaceModel> {
    return this.prisma.interfaceModel.update<T>(args);
  }
  async deleteInterfaceModel<T extends Prisma.InterfaceModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterfaceModelDeleteArgs>
  ): Promise<PrismaInterfaceModel> {
    return this.prisma.interfaceModel.delete(args);
  }

  async findClientInterfaces(
    parentId: string,
    args: Prisma.ClientInterfaceFindManyArgs
  ): Promise<PrismaClientInterface[]> {
    return this.prisma.interfaceModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .clientInterfaces(args);
  }
}
