/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InterfaceModelService } from "../interfaceModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InterfaceModelCreateInput } from "./InterfaceModelCreateInput";
import { InterfaceModel } from "./InterfaceModel";
import { InterfaceModelFindManyArgs } from "./InterfaceModelFindManyArgs";
import { InterfaceModelWhereUniqueInput } from "./InterfaceModelWhereUniqueInput";
import { InterfaceModelUpdateInput } from "./InterfaceModelUpdateInput";
import { ClientInterfaceFindManyArgs } from "../../clientInterface/base/ClientInterfaceFindManyArgs";
import { ClientInterface } from "../../clientInterface/base/ClientInterface";
import { ClientInterfaceWhereUniqueInput } from "../../clientInterface/base/ClientInterfaceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InterfaceModelControllerBase {
  constructor(
    protected readonly service: InterfaceModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InterfaceModel })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInterfaceModel(
    @common.Body() data: InterfaceModelCreateInput
  ): Promise<InterfaceModel> {
    return await this.service.createInterfaceModel({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [InterfaceModel] })
  @ApiNestedQuery(InterfaceModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async interfaceModels(
    @common.Req() request: Request
  ): Promise<InterfaceModel[]> {
    const args = plainToClass(InterfaceModelFindManyArgs, request.query);
    return this.service.interfaceModels({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InterfaceModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async interfaceModel(
    @common.Param() params: InterfaceModelWhereUniqueInput
  ): Promise<InterfaceModel | null> {
    const result = await this.service.interfaceModel({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InterfaceModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInterfaceModel(
    @common.Param() params: InterfaceModelWhereUniqueInput,
    @common.Body() data: InterfaceModelUpdateInput
  ): Promise<InterfaceModel | null> {
    try {
      return await this.service.updateInterfaceModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InterfaceModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInterfaceModel(
    @common.Param() params: InterfaceModelWhereUniqueInput
  ): Promise<InterfaceModel | null> {
    try {
      return await this.service.deleteInterfaceModel({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clientInterfaces")
  @ApiNestedQuery(ClientInterfaceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClientInterface",
    action: "read",
    possession: "any",
  })
  async findClientInterfaces(
    @common.Req() request: Request,
    @common.Param() params: InterfaceModelWhereUniqueInput
  ): Promise<ClientInterface[]> {
    const query = plainToClass(ClientInterfaceFindManyArgs, request.query);
    const results = await this.service.findClientInterfaces(params.id, {
      ...query,
      select: {
        accessDetails: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        interfaceField: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clientInterfaces")
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "update",
    possession: "any",
  })
  async connectClientInterfaces(
    @common.Param() params: InterfaceModelWhereUniqueInput,
    @common.Body() body: ClientInterfaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientInterfaces: {
        connect: body,
      },
    };
    await this.service.updateInterfaceModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clientInterfaces")
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "update",
    possession: "any",
  })
  async updateClientInterfaces(
    @common.Param() params: InterfaceModelWhereUniqueInput,
    @common.Body() body: ClientInterfaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientInterfaces: {
        set: body,
      },
    };
    await this.service.updateInterfaceModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clientInterfaces")
  @nestAccessControl.UseRoles({
    resource: "InterfaceModel",
    action: "update",
    possession: "any",
  })
  async disconnectClientInterfaces(
    @common.Param() params: InterfaceModelWhereUniqueInput,
    @common.Body() body: ClientInterfaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientInterfaces: {
        disconnect: body,
      },
    };
    await this.service.updateInterfaceModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
